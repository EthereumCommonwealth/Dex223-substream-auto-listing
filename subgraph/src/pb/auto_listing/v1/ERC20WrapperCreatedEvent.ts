// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Transaction } from "./Transaction";

export class ERC20WrapperCreatedEvent {
  static encode(message: ERC20WrapperCreatedEvent, writer: Writer): void {
    const tx = message.tx;
    if (tx !== null) {
      writer.uint32(10);
      writer.fork();
      Transaction.encode(tx, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.addressERC20);

    writer.uint32(26);
    writer.string(message.addressERC223);
  }

  static decode(reader: Reader, length: i32): ERC20WrapperCreatedEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ERC20WrapperCreatedEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.tx = Transaction.decode(reader, reader.uint32());
          break;

        case 2:
          message.addressERC20 = reader.string();
          break;

        case 3:
          message.addressERC223 = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  tx: Transaction | null;
  addressERC20: string;
  addressERC223: string;

  constructor(
    tx: Transaction | null = null,
    addressERC20: string = "",
    addressERC223: string = ""
  ) {
    this.tx = tx;
    this.addressERC20 = addressERC20;
    this.addressERC223 = addressERC223;
  }
}
