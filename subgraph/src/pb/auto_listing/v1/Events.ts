// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { ListingContractUpdated } from "./ListingContractUpdated";
import { ListingPrice } from "./ListingPrice";
import { TokenListed } from "./TokenListed";
import { ERC20WrapperCreatedEvent } from "./ERC20WrapperCreatedEvent";
import { ERC223WrapperCreatedEvent } from "./ERC223WrapperCreatedEvent";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const listingContractUpdateds = message.listingContractUpdateds;
    for (let i: i32 = 0; i < listingContractUpdateds.length; ++i) {
      writer.uint32(10);
      writer.fork();
      ListingContractUpdated.encode(listingContractUpdateds[i], writer);
      writer.ldelim();
    }

    const listingPrices = message.listingPrices;
    for (let i: i32 = 0; i < listingPrices.length; ++i) {
      writer.uint32(18);
      writer.fork();
      ListingPrice.encode(listingPrices[i], writer);
      writer.ldelim();
    }

    const tokenListeds = message.tokenListeds;
    for (let i: i32 = 0; i < tokenListeds.length; ++i) {
      writer.uint32(26);
      writer.fork();
      TokenListed.encode(tokenListeds[i], writer);
      writer.ldelim();
    }

    const erc223ToErc20 = message.erc223ToErc20;
    for (let i: i32 = 0; i < erc223ToErc20.length; ++i) {
      writer.uint32(34);
      writer.fork();
      ERC20WrapperCreatedEvent.encode(erc223ToErc20[i], writer);
      writer.ldelim();
    }

    const erc20ToErc223 = message.erc20ToErc223;
    for (let i: i32 = 0; i < erc20ToErc223.length; ++i) {
      writer.uint32(42);
      writer.fork();
      ERC223WrapperCreatedEvent.encode(erc20ToErc223[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.listingContractUpdateds.push(
            ListingContractUpdated.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.listingPrices.push(
            ListingPrice.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.tokenListeds.push(
            TokenListed.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.erc223ToErc20.push(
            ERC20WrapperCreatedEvent.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.erc20ToErc223.push(
            ERC223WrapperCreatedEvent.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  listingContractUpdateds: Array<ListingContractUpdated>;
  listingPrices: Array<ListingPrice>;
  tokenListeds: Array<TokenListed>;
  erc223ToErc20: Array<ERC20WrapperCreatedEvent>;
  erc20ToErc223: Array<ERC223WrapperCreatedEvent>;

  constructor(
    listingContractUpdateds: Array<ListingContractUpdated> = [],
    listingPrices: Array<ListingPrice> = [],
    tokenListeds: Array<TokenListed> = [],
    erc223ToErc20: Array<ERC20WrapperCreatedEvent> = [],
    erc20ToErc223: Array<ERC223WrapperCreatedEvent> = []
  ) {
    this.listingContractUpdateds = listingContractUpdateds;
    this.listingPrices = listingPrices;
    this.tokenListeds = tokenListeds;
    this.erc223ToErc20 = erc223ToErc20;
    this.erc20ToErc223 = erc20ToErc223;
  }
}
