// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { TokenInfo } from "./TokenInfo";

export class FeeToken {
  static encode(message: FeeToken, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.address);

    const tokenInfo = message.tokenInfo;
    if (tokenInfo !== null) {
      writer.uint32(18);
      writer.fork();
      TokenInfo.encode(tokenInfo, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): FeeToken {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FeeToken();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;

        case 2:
          message.tokenInfo = TokenInfo.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: string;
  tokenInfo: TokenInfo | null;

  constructor(address: string = "", tokenInfo: TokenInfo | null = null) {
    this.address = address;
    this.tokenInfo = tokenInfo;
  }
}
