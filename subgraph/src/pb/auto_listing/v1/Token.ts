// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { TokenInfo } from "./TokenInfo";

export class Token {
  static encode(message: Token, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.addressERC20);

    writer.uint32(18);
    writer.string(message.addressERC223);

    const tokenInfo = message.tokenInfo;
    if (tokenInfo !== null) {
      writer.uint32(26);
      writer.fork();
      TokenInfo.encode(tokenInfo, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Token {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Token();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addressERC20 = reader.string();
          break;

        case 2:
          message.addressERC223 = reader.string();
          break;

        case 3:
          message.tokenInfo = TokenInfo.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  addressERC20: string;
  addressERC223: string;
  tokenInfo: TokenInfo | null;

  constructor(
    addressERC20: string = "",
    addressERC223: string = "",
    tokenInfo: TokenInfo | null = null
  ) {
    this.addressERC20 = addressERC20;
    this.addressERC223 = addressERC223;
    this.tokenInfo = tokenInfo;
  }
}
