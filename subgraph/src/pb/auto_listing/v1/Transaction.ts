// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Transaction {
  static encode(message: Transaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.id);

    writer.uint32(16);
    writer.uint64(message.blockNumber);

    writer.uint32(24);
    writer.uint64(message.timestamp);

    writer.uint32(32);
    writer.uint64(message.gasUsed);

    writer.uint32(42);
    writer.string(message.gasPrice);

    writer.uint32(48);
    writer.uint64(message.logOrdinal);

    writer.uint32(58);
    writer.string(message.address);

    writer.uint32(66);
    writer.string(message.from);

    writer.uint32(74);
    writer.string(message.to);
  }

  static decode(reader: Reader, length: i32): Transaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Transaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;

        case 2:
          message.blockNumber = reader.uint64();
          break;

        case 3:
          message.timestamp = reader.uint64();
          break;

        case 4:
          message.gasUsed = reader.uint64();
          break;

        case 5:
          message.gasPrice = reader.string();
          break;

        case 6:
          message.logOrdinal = reader.uint64();
          break;

        case 7:
          message.address = reader.string();
          break;

        case 8:
          message.from = reader.string();
          break;

        case 9:
          message.to = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  id: string;
  blockNumber: u64;
  timestamp: u64;
  gasUsed: u64;
  gasPrice: string;
  logOrdinal: u64;
  address: string;
  from: string;
  to: string;

  constructor(
    id: string = "",
    blockNumber: u64 = 0,
    timestamp: u64 = 0,
    gasUsed: u64 = 0,
    gasPrice: string = "",
    logOrdinal: u64 = 0,
    address: string = "",
    from: string = "",
    to: string = ""
  ) {
    this.id = id;
    this.blockNumber = blockNumber;
    this.timestamp = timestamp;
    this.gasUsed = gasUsed;
    this.gasPrice = gasPrice;
    this.logOrdinal = logOrdinal;
    this.address = address;
    this.from = from;
    this.to = to;
  }
}
